extends base.jade
block title
	title 一维数组深复制
block articleTitle
	header.title 思考题 一维数组深复制
block postDate
	.post-date 13 May 2016
block vars
	- var fileName = 'cloneArray';
block article
	p 今天群里的小伙伴无意间提起这件一直被我搁置的事情，今天决定将其付诸实践。
	p 一维数组的深复制是一个平时项目实践中都可能会用到的，但是如果用尽可能多的方式实现这一操作呢？有多少种呢？
	p 这里会列举一些比较精简的方式，如果读者收到一些启示，那我将不甚荣幸。
	p 方案一 利用数组的slice操作
	pre
		code.
			var cloneArray = function(arr) {
				return arr.slice(0);
			};
	p 方案二 利用数组的concat操作
	pre
		code.
			var cloneArray = function(arr) {
				return [].concat(arr);
			};
	p 方案三 利用数组的splice操作
	pre
		code.
			var cloneArray = function(arr) {
				return arr.splice(0, arr.length);
			};
	p 方案四 利用JSON的解析互逆操作
	pre
		code.
			var cloneArray = function(arr) {
				return JSON.parse(JSON.stringify(arr));
			};
	p 方案五 利用数组的filter操作
	pre
		code.
			var cloneArray = function(arr) {
				return arr.filter(function(val) {
					return true;
				});
			};
	p 方案六 利用数组的map操作
	pre
		code.
			var cloneArray = function(arr) {
				return arr.map(function(val) {
					return val;
				});
			};
	p 方案七 利用EcmaScript6的数组可变参数的构造函数
	pre
		code.
			var cloneArray = function(arr) {
				return arr.length === 1 ? [arr[0]] : Array(...arr);
			};
	p 方案八 利用解构数组
	pre
		code.
			var cloneArray = function(arr) {
				return [...arr];
			};
	p 方案九 利用Array.of
	pre
		code.
			var cloneArray = function(arr) {
				return Array.of(...arr);
			};
	p 方案十 利用Array.from
	pre
		code.
			var cloneArray = function(arr) {
				return Array.from(arr);
			};
	p
		| 以上列举了十种不同的方案，每个方案各有利弊，如果有不理解的api可以参看
		a(href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank") MDN
		| 或者
		a(href="http://devdocs.io" target="_blank") DevDocs
		| ，相信你会有不一样的收获。


